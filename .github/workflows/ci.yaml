name: CI/CD Pipeline for 3-Tier App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest

    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      BACKEND_IMAGE: backend
      FRONTEND_IMAGE: frontend

    steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Docker
    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    # Step 3: Log in to DockerHub
    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # Step 4: Build and Push Backend Image
    - name: Build and Push Backend Image
      run: |
        docker build -t $DOCKERHUB_USERNAME/$BACKEND_IMAGE:latest ./api
        docker tag $DOCKERHUB_USERNAME/$BACKEND_IMAGE:latest $DOCKERHUB_USERNAME/$BACKEND_IMAGE:${{ github.sha }}
        docker push $DOCKERHUB_USERNAME/$BACKEND_IMAGE:latest
        docker push $DOCKERHUB_USERNAME/$BACKEND_IMAGE:${{ github.sha }}

    # Step 5: Build and Push Frontend Image
    - name: Build and Push Frontend Image
      run: |
        docker build -t $DOCKERHUB_USERNAME/$FRONTEND_IMAGE:latest ./ui
        docker tag $DOCKERHUB_USERNAME/$FRONTEND_IMAGE:latest $DOCKERHUB_USERNAME/$FRONTEND_IMAGE:${{ github.sha }}
        docker push $DOCKERHUB_USERNAME/$FRONTEND_IMAGE:latest
        docker push $DOCKERHUB_USERNAME/$FRONTEND_IMAGE:${{ github.sha }}

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up AWS CLI
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-1

    # Step 3: Update kubeconfig
    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region us-west-1 --name kri-eks-cluster

    # Step 4: Deploy to EKS
    - name: Apply Kubernetes Manifests
      run: |
        kubectl apply -f ./K8s/frontend.yaml
        kubectl apply -f ./K8s/backend.yaml
        kubectl apply -f ./K8s/postgres.yaml
